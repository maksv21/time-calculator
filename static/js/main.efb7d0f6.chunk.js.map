{"version":3,"sources":["features/input/mainInputSlice/utils/textTesters/runTextTesters.ts","features/input/mainInputSlice/utils/calculateTime.ts","features/input/mainInputSlice/utils/textTesters/testers.ts","features/input/mainInputSlice/types.ts","features/input/mainInputSlice/index.ts","app/store.ts","app/theme.ts","app/styles.ts","features/input/ExpressionInput/CustomInput/styles.ts","features/input/ExpressionInput/CustomInput/hooks/useMouseWheelScroll.ts","features/input/ExpressionInput/CustomInput/hooks/useCaretPosition.ts","features/input/ExpressionInput/CustomInput/hooks/useCaretAnimation.ts","features/input/ExpressionInput/CustomInput/hooks/useDynamicFontSize/getTextWidth.ts","features/input/ExpressionInput/CustomInput/hooks/useDynamicFontSize/index.ts","features/input/ExpressionInput/CustomInput/hooks/useCaretMargin.ts","features/input/ExpressionInput/CustomInput/hooks/useHardwareKeyboard.ts","features/input/ExpressionInput/CustomInput/hooks/useScrollToCaret.ts","features/input/ExpressionInput/CustomInput/index.tsx","app/hooks.ts","features/input/ExpressionInput/styles.ts","features/input/ExpressionInput/index.tsx","features/input/Keyboard/styles.ts","features/input/Keyboard/index.tsx","app/AppLayout.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["TypesOfRenderValue","numberToTime","number","splitNumber","toString","split","hours","minutes","Math","round","slice","calculateTime","timeExpression","expression","replace","value","timeValue","map","item","timeToExpression","calculatedValue","Function","Number","MAX_SAFE_INTEGER","isCorrect","error","time","testersArr","regExp","errorText","isCritical","match","RegExp","ERROR_TAGS","OperatorKeys","findErrors","stringToTest","reduce","resultObj","tester","errorTag","valueWithErrors","matchedValue","criticalErrorsCount","firstFoundError","matchedObj","matchedIndex","index","length","matchError","runTextTesters","prevValue","newValue","isTestModeStrict","criticalErrorsInPrevValue","valueToRender","matched","type","warning","DEL_KEY","initialState","preResult","caretPosition","setNewValueToState","state","testedInputValue","newCaretPosition","mainInputSlice","createSlice","name","reducers","generalOrDelKeyPressed","action","prevInputValue","pressedKey","payload","substring","handleGeneralKeyPress","equalsKeyPressed","clearAllKeyPressed","caretPositionChanged","hardwareKeyPressed","actions","store","configureStore","reducer","mainInput","mainInputReducer","FONT_FAMILY","createTheme","isDarkModeEnabled","createMuiTheme","palette","primary","main","secondary","typography","fontSize","fontFamily","useStyles","makeStyles","theme","root","height","width","background","default","expressionInput","paper","position","boxShadow","keyboard","maxWidth","margin","cursor","display","overflow","input","minHeight","whiteSpace","props","marginLeft","padding","transition","outline","alignItems","inputForCalculation","visibility","opacity","blinkingAnimation","animation","caret","getContrastText","marginRight","inputPadding","pointerEvents","useMouseWheelScroll","inputElem","handleMouseWheel","useCallback","event","scrollLeft","deltaY","useEffect","addEventListener","removeEventListener","useCaretPosition","onCaretPositionChange","caretElem","handleCaretPositionChange","selection","window","getSelection","anchorNode","contains","selectedElement","parentElement","offset","children","find","element","textContent","anchorOffset","document","useCaretAnimation","valueOneString","isCursorVisible","blinkingAnimationClass","useState","isCursorAnimationVisible","setCursorAnimationVisibility","timerIdRef","useRef","classList","add","remove","current","setTimeout","clearTimeout","getTextWidth","elem","context","createElement","getContext","font","getComputedStyle","measureText","useDynamicFontSize","inputRootElem","minFontSize","currentFontSize","setCurrentFontSize","fontSizeRef","handleFontSizeUpdate","inputRootWidth","clientWidth","inputTextWidth","textSizeDiff","newFontSize","useCaretMargin","inputValue","setMargin","handleCaretPositionUpdate","firstChild","range","Range","setStart","setEnd","rangeWidth","getBoundingClientRect","timerId","useHardwareKeyboard","isInputFocused","onInput","onEqualsKeyPressed","handleKeyDown","e","key","Div","Mult","handlePaste","clipboardData","pastedValue","getData","useScrollToCaret","caretElement","scrollToCaret","visibleRange","caretLeftMargin","left","scrollTo","behavior","CustomInput","rootRef","inputRef","caretRef","inputForCalculationRef","classes","handleBlur","focus","preventScroll","caretMargin","className","ref","onBlur","style","right","useAppSelector","useSelector","justifyContent","flexFlow","textAlign","color","text","makeUniqueKey","Date","now","random","ExpressionInput","styles","dispatch","useDispatch","handleInput","handleEqualsKeyPress","useMemo","lengthOfPrevElements","flatMap","valueObj","elementValue","inputValueOneString","button","flex","rightButtons","grey","Keyboard","BUTTONS_LEFT","Decimal","Colon","OPERATORS_RIGHT","Minus","Plus","handleKeyClick","clickedKeyValue","handleEqualsClick","handleDelClick","vibrate","navigator","handleDelLongPress","useLongPress","isPreventDefault","delay","CalcButton","onTouchStart","ButtonBase","Grid","container","xs","buttonsRow","btnValue","onMouseUp","direction","AppLayout","App","useMediaQuery","shouldRender","setShouldRender","ThemeProvider","CssBaseline","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.efb7d0f6.chunk.js","sourcesContent":["import { testersArr } from './testers'\n\nconst ERROR_TAGS = {\n  critical: '$',\n  nonCritical: '#',\n}\n\nexport enum TypesOfRenderValue {\n  value,\n  error,\n  warning,\n}\n\nexport type ValueWithErrors = { value: string; type: TypesOfRenderValue }[]\n\ninterface TextTestersRunner {\n  (props: { prevValue: string; newValue: string; isTestModeStrict: boolean }):\n    | {\n        isCorrect: true\n      }\n    | {\n        isCorrect: false\n        error?: string\n        valueToRender?: ValueWithErrors\n      }\n}\n\nconst matchError = (\n  value: string,\n  regExp: RegExp,\n  errorTag: string\n): string => {\n  const matchedObj = value.match(regExp)\n\n  if (!matchedObj) return ''\n\n  const matchedIndex = matchedObj.index || 0\n  const matchedValue = matchedObj[0]\n\n  return (\n    value.slice(0, matchedIndex) +\n    errorTag +\n    matchedValue +\n    errorTag +\n    value.slice(matchedIndex + matchedValue.length)\n  )\n}\n\nconst findErrors = (stringToTest: string) =>\n  testersArr.reduce(\n    (\n      resultObj: {\n        valueWithErrors: string\n        criticalErrorsCount: number\n        firstFoundError: null | string\n      },\n      tester\n    ) => {\n      const errorTag = tester.isCritical\n        ? ERROR_TAGS.critical\n        : ERROR_TAGS.nonCritical\n\n      resultObj.valueWithErrors = resultObj.valueWithErrors.replace(\n        tester.regExp,\n        (matchedValue) => {\n          if (tester.isCritical) resultObj.criticalErrorsCount += 1\n          resultObj.firstFoundError =\n            resultObj.firstFoundError || tester.errorText\n\n          return tester.match\n            ? matchError(matchedValue, tester.match, errorTag)\n            : errorTag + matchedValue + errorTag\n        }\n      )\n\n      return resultObj\n    },\n    {\n      valueWithErrors: stringToTest,\n      criticalErrorsCount: 0,\n      firstFoundError: null,\n    }\n  )\n\nconst runTextTesters: TextTestersRunner = ({\n  prevValue,\n  newValue,\n  isTestModeStrict,\n}) => {\n  const { valueWithErrors, criticalErrorsCount, firstFoundError } =\n    findErrors(newValue)\n\n  if (!firstFoundError) {\n    return { isCorrect: true }\n  }\n\n  const { criticalErrorsCount: criticalErrorsInPrevValue } =\n    findErrors(prevValue)\n\n  if (isTestModeStrict && criticalErrorsCount > criticalErrorsInPrevValue) {\n    return { isCorrect: false }\n  }\n\n  const valueToRender: ValueWithErrors =\n    valueWithErrors.match(/(\\$[^$]+\\$)|(#[^#]+#)|[^#$]+/g)?.map((matched) => {\n      if (\n        matched[0] === ERROR_TAGS.critical ||\n        matched[0] === ERROR_TAGS.nonCritical\n      ) {\n        return {\n          value: matched.replace(\n            new RegExp(\n              `[${ERROR_TAGS.critical + ERROR_TAGS.nonCritical}]`,\n              'g'\n            ),\n            ''\n          ),\n          type:\n            matched[0] === ERROR_TAGS.critical\n              ? TypesOfRenderValue.error\n              : TypesOfRenderValue.warning,\n        }\n      }\n\n      return {\n        value: matched,\n        type: TypesOfRenderValue.value,\n      }\n    }) || []\n\n  return { isCorrect: false, error: firstFoundError, valueToRender }\n}\n\nexport default runTextTesters\n","const timeToExpression = (timeExpression: string): string =>\n  timeExpression\n    .replace(/÷/g, '/')\n    .replace(/×/g, '*')\n    .replace(/(^[^\\d]+)|([^\\d]+$)/g, '')\n\n    .replace(/^0+\\d/g, (value) => value.slice(-1)) // 00123+123 -> 123+123, at the start\n    .replace(/[^\\d]0+\\d/g, (value) => value.replace('0', '')) // 123+00123 -> 123+123, at the middle of the expression\n\n    .replace(/\\d+:\\d*/g, (value) => {\n      // 10:30 -> 10.5\n      const timeValue = value.split(':').map((item) => +item)\n      timeValue[1] /= 60\n\n      return (timeValue[0] + timeValue[1]).toString()\n    })\n\nconst numberToTime = (number: number): string => {\n  const splitNumber = number.toString().split('.') // 0 - hours, 1 - minutes\n\n  const hours = splitNumber[0]\n  let minutes = splitNumber[1]\n  if (minutes) {\n    minutes = `0.${minutes}`\n    minutes = Math.round(+minutes * 60).toString() // 100 -> 60\n    minutes = `0${minutes}`.slice(-2) // 1 -> 01\n  } else {\n    minutes = '00' // 1 -> 01\n  }\n\n  return `${hours}:${minutes}`\n}\n\ninterface TimeCalculator {\n  (timeExpression: string):\n    | {\n        isCorrect: true\n        value: string\n      }\n    | {\n        isCorrect: false\n        error: string\n      }\n}\n\nconst calculateTime: TimeCalculator = (timeExpression: string) => {\n  const expression = timeToExpression(timeExpression)\n\n  try {\n    // eslint-disable-next-line  no-new-func\n    const calculatedValue = new Function(`return ${expression}`)()\n\n    if (calculatedValue > Number.MAX_SAFE_INTEGER) {\n      return { isCorrect: false, error: 'Error: Number is too big' }\n    }\n\n    return { isCorrect: true, value: numberToTime(calculatedValue) }\n  } catch {\n    return { isCorrect: false, error: 'Error: Bad expression' }\n  }\n}\n\nexport default calculateTime\n","export interface TextTester {\n  regExp: RegExp\n  // regExp is for testing, match is for rendering issue. optional if regExp can be used for the match\n  match?: RegExp\n  errorText: string\n  isCritical: boolean // will affect on rendering\n}\n\nconst time = '(\\\\d+:\\\\d*)'\n\nexport const testersArr: TextTester[] = [\n  {\n    regExp: /[^÷×\\-+:.\\d]/g,\n    errorText: 'Incorrect characters',\n    isCritical: true,\n  },\n\n  {\n    regExp: /\\d{11,}/g,\n    errorText: 'Number is too big',\n    isCritical: true,\n  },\n\n  {\n    regExp: /[÷×\\-+:.]{2,}/g,\n    errorText: 'Two operators in a row',\n    isCritical: true,\n  },\n\n  {\n    regExp: /(÷0+[^0-9]+)|(÷0+$)/g,\n    match: /÷0+/,\n    errorText: \"Can't divide by zero\",\n    isCritical: false,\n  },\n\n  {\n    regExp: /(\\d*[.:]\\d*){2,}/g,\n    errorText: 'Two separators in one number (: or .)',\n    isCritical: true,\n  },\n\n  {\n    regExp: new RegExp(`${time}[×÷]${time}`, 'g'),\n    errorText: \"Can't multiply or divide time\",\n    isCritical: false,\n  },\n]\n","import type { ValueWithErrors } from './utils/textTesters/runTextTesters'\n\nexport type ValueToRender = ValueWithErrors | string | null\n\nexport interface MainInputState {\n  value: string\n  // equal the value or the modified value with styles, such as highlighted errors\n  valueToRender: ValueToRender\n  preResult: null | string\n  error: string | null\n  caretPosition: number\n}\n\nexport type NumberKeys =\n  | '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n\nexport enum OperatorKeys {\n  Plus = '+',\n  Minus = '-',\n  Div = '÷',\n  Mult = '×',\n  Decimal = '.',\n  Colon = ':',\n}\n\nexport const DEL_KEY = 'DEL_KEY'\n\nexport type GeneralKey = NumberKeys | OperatorKeys\n\nexport interface HandleKeyPressFunc {\n  (prevInputValue: string, caretPosition: number, pressedKey?: GeneralKey): {\n    newValue: string\n    newCaretPosition: number\n    isTestModeStrict: boolean\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport type { PayloadAction } from '@reduxjs/toolkit'\nimport calculateTime from './utils/calculateTime'\nimport runTextTesters from './utils/textTesters/runTextTesters'\nimport type { GeneralKey, HandleKeyPressFunc, MainInputState } from './types'\nimport { DEL_KEY } from './types'\n\nconst initialState: MainInputState = {\n  value: '',\n  valueToRender: '',\n  preResult: null,\n  error: null,\n  caretPosition: 0,\n}\n\nconst handleGeneralKeyPress: HandleKeyPressFunc = (\n  prevInputValue,\n  caretPosition,\n  pressedKey\n) => {\n  const gluedValue =\n    prevInputValue.substring(0, caretPosition) +\n    pressedKey +\n    prevInputValue.substring(caretPosition)\n\n  const newValue = gluedValue // todo: CHAR-38 runTextEnhancers(prevInputValue, gluedValue)\n\n  return {\n    newValue,\n    newCaretPosition: caretPosition + 1,\n    isTestModeStrict: true,\n  }\n}\n\nconst handleDelKeyPress: HandleKeyPressFunc = (\n  prevInputValue,\n  caretPosition\n) => {\n  const isTestModeStrict = false\n\n  if (caretPosition !== 0) {\n    return {\n      newValue:\n        prevInputValue.slice(0, caretPosition - 1) +\n        prevInputValue.slice(caretPosition),\n      newCaretPosition: caretPosition - 1,\n      isTestModeStrict,\n    }\n  }\n\n  return {\n    newValue: prevInputValue.slice(1),\n    newCaretPosition: caretPosition,\n    isTestModeStrict,\n  }\n}\n\nconst setNewValueToState = ({\n  state,\n  testedInputValue,\n  newValue,\n  newCaretPosition,\n}: {\n  state: MainInputState\n  testedInputValue: ReturnType<typeof runTextTesters>\n  newValue: string\n  newCaretPosition: number\n}) => {\n  if (testedInputValue.isCorrect) {\n    state.value = newValue\n\n    const preResult = calculateTime(newValue)\n\n    if (preResult.isCorrect) {\n      state.preResult = preResult.value\n      state.error = null\n    } else {\n      state.preResult = ''\n      state.error = preResult.error\n    }\n\n    state.valueToRender = newValue\n\n    state.caretPosition = newCaretPosition\n  } else if (testedInputValue.valueToRender) {\n    state.value = newValue\n\n    if (testedInputValue.error) state.error = testedInputValue.error\n    state.valueToRender = testedInputValue.valueToRender\n\n    state.preResult = null\n    state.caretPosition = newCaretPosition\n  }\n}\n\nexport const mainInputSlice = createSlice({\n  name: 'mainInput',\n  initialState,\n  reducers: {\n    generalOrDelKeyPressed: (\n      state,\n      action: PayloadAction<GeneralKey | typeof DEL_KEY>\n    ) => {\n      const pressedKey = action.payload\n\n      const { newValue, newCaretPosition, isTestModeStrict } =\n        pressedKey === DEL_KEY\n          ? handleDelKeyPress(state.value, state.caretPosition)\n          : handleGeneralKeyPress(state.value, state.caretPosition, pressedKey)\n\n      const testedInputValue = runTextTesters({\n        prevValue: state.value,\n        newValue,\n        isTestModeStrict,\n      })\n\n      setNewValueToState({\n        state,\n        testedInputValue,\n        newValue,\n        newCaretPosition,\n      })\n    },\n\n    // todo: CHAR-61, add calculated flag\n    equalsKeyPressed: (state) => {\n      if (state.preResult && !state.error) {\n        state.value = state.preResult\n        state.valueToRender = state.value\n        state.preResult = null\n\n        state.caretPosition = state.value.length\n      } else {\n        state.preResult = state.error\n      }\n    },\n\n    clearAllKeyPressed: () => ({ ...initialState }),\n\n    caretPositionChanged: (state, action: PayloadAction<number>) => {\n      state.caretPosition = action.payload\n    },\n\n    hardwareKeyPressed: (\n      state,\n      action: PayloadAction<{\n        newValue: string\n        newCaretPosition: number\n        isTestModeStrict: boolean\n      }>\n    ) => {\n      const { newValue, newCaretPosition, isTestModeStrict } = action.payload\n      const testedInputValue = runTextTesters({\n        prevValue: state.value,\n        newValue: action.payload.newValue,\n        isTestModeStrict,\n      })\n\n      setNewValueToState({\n        state,\n        testedInputValue,\n        newValue,\n        newCaretPosition,\n      })\n    },\n  },\n})\n\nexport const {\n  generalOrDelKeyPressed,\n  equalsKeyPressed,\n  clearAllKeyPressed,\n  caretPositionChanged,\n  hardwareKeyPressed,\n} = mainInputSlice.actions\n\nexport default mainInputSlice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport type { Action, ThunkAction } from '@reduxjs/toolkit'\nimport mainInputReducer from '../features/input/mainInputSlice'\n\nexport const store = configureStore({\n  reducer: {\n    mainInput: mainInputReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","import { createMuiTheme } from '@material-ui/core'\nimport type { Theme } from '@material-ui/core'\n\nexport const FONT_FAMILY = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif'\n\nconst createTheme = (isDarkModeEnabled?: boolean): Theme =>\n  createMuiTheme({\n    palette: {\n      type: isDarkModeEnabled ? 'dark' : 'light',\n\n      primary: {\n        main: '#ffc107',\n      },\n      secondary: {\n        main: '#ff9100',\n      },\n    },\n    typography: {\n      fontSize: 10,\n      fontFamily: FONT_FAMILY,\n    },\n  })\n\nexport default createTheme\n","import { makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%',\n    width: '100%',\n    background: theme.palette.background.default,\n  },\n\n  expressionInput: {\n    background: theme.palette.background.paper,\n    height: '30%',\n    position: 'relative',\n    boxShadow: '0px 0px 7px rgb(0 0 0 / 25%)',\n  },\n\n  keyboard: {\n    height: '70%',\n    maxWidth: '900px',\n    margin: '0 auto',\n  },\n}))\n\nexport default useStyles\n","import { makeStyles } from '@material-ui/core'\n\nimport type { Theme } from '@material-ui/core'\n\nexport interface Props {\n  fontSize: number\n}\n\nexport const inputPadding = 25\nconst caretWidth = 2\n\nconst useStyles = makeStyles<Theme, Props>((theme) => ({\n  root: {\n    cursor: 'text',\n    display: 'flex',\n    overflow: 'auto',\n    /* Hide scrollbar for Chromium browsers */\n    '&::-webkit-scrollbar': {\n      display: 'none',\n    },\n    /* Hide scrollbar for Firefox */\n    'scrollbar-width': 'none',\n  },\n  input: {\n    minHeight: 64,\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    fontSize: (props) => `${props.fontSize}rem`,\n    marginLeft: 'auto',\n    padding: `0 ${inputPadding}px`,\n    transition: 'font-size 0.1s',\n    outline: 'none',\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  inputForCalculation: {\n    whiteSpace: 'nowrap',\n    fontSize: (props) => `${props.fontSize}rem`,\n    visibility: 'hidden',\n    height: '0',\n  },\n  '@keyframes blinking': {\n    '50%': {\n      opacity: 0,\n    },\n  },\n  blinkingAnimation: {\n    animation: '$blinking 1.3s step-start 0s infinite',\n  },\n  caret: {\n    background: theme.palette.getContrastText(theme.palette.background.default),\n    width: caretWidth,\n    height: (props) => `${props.fontSize + 1}rem`,\n    position: 'absolute',\n    marginRight: `${inputPadding - caretWidth / 2}px`, // -\n    transition: 'all 0.1s',\n    pointerEvents: 'none',\n  },\n}))\n\nexport default useStyles\n","import { useCallback, useEffect } from 'react'\n\nimport type { InputElement } from '../types'\n\nconst useMouseWheelScroll = (inputElem: InputElement): void => {\n  const handleMouseWheel = useCallback(\n    (event) => {\n      if (!inputElem) return\n\n      inputElem.scrollLeft -= event.deltaY\n    },\n    [inputElem]\n  )\n\n  useEffect(() => {\n    if (!inputElem) return\n\n    inputElem.addEventListener('mousewheel', handleMouseWheel)\n\n    return () => inputElem?.removeEventListener('mousewheel', handleMouseWheel)\n  }, [inputElem, handleMouseWheel])\n}\n\nexport default useMouseWheelScroll\n","import { useCallback, useEffect } from 'react'\nimport type { CaretElement, InputElement } from '../types'\n\ninterface Props {\n  caretElem: CaretElement\n  onCaretPositionChange: (newPosition: number) => void\n  inputElem: InputElement\n}\n\nconst useCaretPosition = ({\n  onCaretPositionChange,\n  caretElem,\n  inputElem,\n}: Props): void => {\n  const handleCaretPositionChange = useCallback(() => {\n    const selection = window.getSelection()\n    if (\n      !selection ||\n      selection.anchorNode === caretElem ||\n      !inputElem?.contains(selection.anchorNode)\n    )\n      return\n\n    if (selection.type === 'Caret') {\n      const selectedElement = selection.anchorNode?.parentElement\n\n      let offset = 0\n      // value with error or just string, last children is caret\n      if (inputElem?.children && inputElem.children.length > 1) {\n        ;[...inputElem?.children].find((element) => {\n          if (element !== selectedElement) {\n            offset += element.textContent?.length || 0\n            return false\n          }\n\n          offset += selection.anchorOffset\n          return true\n        })\n      } else {\n        offset = selection.anchorOffset\n      }\n\n      onCaretPositionChange(offset)\n    }\n  }, [caretElem, inputElem, onCaretPositionChange])\n\n  useEffect(() => {\n    document.addEventListener('selectionchange', handleCaretPositionChange)\n    return () => {\n      document.removeEventListener('selectionchange', handleCaretPositionChange)\n    }\n  }, [handleCaretPositionChange])\n}\n\nexport default useCaretPosition\n","import { useEffect, useRef, useState } from 'react'\nimport type { CaretElement } from '../types'\n\ninterface Props {\n  caretElem: CaretElement\n  valueOneString: string | null\n  caretPosition: number\n  isCursorVisible: boolean\n  blinkingAnimationClass: string\n}\n\nconst useCaretAnimation = ({\n  caretElem,\n  valueOneString,\n  isCursorVisible,\n  blinkingAnimationClass,\n  caretPosition,\n}: Props): void => {\n  const [isCursorAnimationVisible, setCursorAnimationVisibility] =\n    useState(true)\n\n  const timerIdRef = useRef<ReturnType<typeof setTimeout>>()\n\n  useEffect(() => {\n    if (!caretElem) return\n\n    if (isCursorAnimationVisible) {\n      caretElem.classList.add(blinkingAnimationClass)\n    } else {\n      caretElem.classList.remove(blinkingAnimationClass)\n    }\n\n    return () => {\n      caretElem.classList.remove(blinkingAnimationClass)\n    }\n  }, [isCursorAnimationVisible, blinkingAnimationClass, caretElem])\n\n  useEffect(() => {\n    if (!caretElem || !isCursorVisible) return\n\n    setCursorAnimationVisibility(false)\n\n    timerIdRef.current = setTimeout(\n      () => setCursorAnimationVisibility(true),\n      500\n    )\n\n    return () => {\n      if (timerIdRef.current) clearTimeout(timerIdRef.current)\n    }\n  }, [valueOneString, caretPosition, caretElem, isCursorVisible])\n}\n\nexport default useCaretAnimation\n","// returns actual text width even if text width < elem.scrollWidth\n\nimport { FONT_FAMILY } from 'app/theme'\n\nconst getTextWidth = (\n  elem: HTMLParagraphElement | HTMLSpanElement\n): number | null => {\n  const { textContent } = elem\n\n  const canvas = document.createElement('canvas')\n  const context = canvas.getContext('2d')\n\n  if (context && textContent) {\n    context.font = `${getComputedStyle(elem).fontSize} ${FONT_FAMILY}`\n    return context.measureText(textContent).width\n  }\n\n  return null\n}\n\nexport default getTextWidth\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport type { InputElement, InputRootElement, InputValue } from '../../types'\n\nimport getTextWidth from './getTextWidth'\n\ninterface Props {\n  value: InputValue\n  inputElem: InputElement\n  inputRootElem: InputRootElement\n  fontSize: number\n  minFontSize?: number\n}\n\nconst useDynamicFontSize = ({\n  value,\n  inputElem,\n  inputRootElem,\n  fontSize,\n  minFontSize,\n}: Props): number => {\n  const [currentFontSize, setCurrentFontSize] = useState(fontSize)\n\n  // to not rerun useEffect on setCurrentFontSize call\n  const fontSizeRef = useRef(currentFontSize)\n  fontSizeRef.current = currentFontSize\n\n  const handleFontSizeUpdate = useCallback(() => {\n    if (!inputRootElem || !inputElem || !minFontSize || !value) return\n    const inputRootWidth = inputRootElem.clientWidth // without scroll\n    const inputTextWidth = getTextWidth(inputElem) // with scroll\n\n    if (inputTextWidth === null) return\n\n    const textSizeDiff = (100 / inputTextWidth) * inputRootWidth // difference in width between the text and the input\n\n    const newFontSize = (fontSizeRef.current / 100) * textSizeDiff * 0.9 // -10% for better view\n\n    if (newFontSize > fontSize) {\n      setCurrentFontSize(fontSize)\n    } else if (newFontSize < minFontSize) {\n      setCurrentFontSize(minFontSize)\n    } else {\n      setCurrentFontSize(newFontSize)\n    }\n  }, [value, fontSize, minFontSize, inputRootElem, inputElem])\n\n  useEffect(() => {\n    handleFontSizeUpdate()\n\n    window.addEventListener('resize', handleFontSizeUpdate)\n\n    return () => window.removeEventListener('resize', handleFontSizeUpdate)\n  }, [handleFontSizeUpdate])\n\n  return currentFontSize\n}\n\nexport default useDynamicFontSize\n","import { useCallback, useEffect, useState } from 'react'\nimport type { InputElement } from '../types'\n\nconst useCaretMargin = (\n  inputElem: InputElement,\n  inputValue: string | null,\n  caretPosition: number\n): number => {\n  const [margin, setMargin] = useState(0)\n\n  const handleCaretPositionUpdate: () => number | void = useCallback(() => {\n    if (!inputElem?.firstChild || !inputValue) {\n      setMargin(0)\n      return\n    }\n    // timeout to get new position after rendering\n    const timerId = setTimeout(() => {\n      if (!inputElem?.firstChild || !inputValue) return\n\n      const range = new Range()\n      range.setStart(inputElem.firstChild, caretPosition)\n      range.setEnd(inputElem.firstChild, inputValue.length)\n\n      const rangeWidth = range.getBoundingClientRect().width\n\n      setMargin(rangeWidth)\n    })\n\n    return timerId\n  }, [inputElem, inputValue, caretPosition])\n\n  useEffect(() => {\n    const timerId = handleCaretPositionUpdate()\n\n    return () => {\n      if (timerId) clearTimeout(timerId)\n    }\n  }, [handleCaretPositionUpdate])\n\n  useEffect(() => {\n    window.addEventListener('resize', handleCaretPositionUpdate)\n    return () => window.removeEventListener('resize', handleCaretPositionUpdate)\n  }, [handleCaretPositionUpdate])\n\n  return margin\n}\n\nexport default useCaretMargin\n","import { OperatorKeys } from 'features/input/mainInputSlice/types'\nimport { useCallback, useEffect } from 'react'\nimport type { CaretPositionChangeHandler, InputHandler } from '../types'\n\ninterface Props {\n  isInputFocused: boolean\n  valueOneString: string | null\n  caretPosition: number\n  onInput: InputHandler\n  onCaretPositionChange: CaretPositionChangeHandler\n  onEqualsKeyPressed: () => void\n}\n\nconst useHardwareKeyboard = ({\n  isInputFocused,\n  valueOneString,\n  caretPosition,\n  onInput,\n  onCaretPositionChange,\n  onEqualsKeyPressed,\n}: Props): void => {\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      const value = valueOneString || ''\n\n      if (e.key === '=') {\n        onEqualsKeyPressed()\n      } else if (e.key === 'Backspace') {\n        if (caretPosition !== 0) {\n          onInput(\n            value.slice(0, caretPosition - 1) + value.slice(caretPosition),\n            caretPosition - 1,\n            false\n          )\n        }\n      } else if (e.key === 'Delete') {\n        if (caretPosition !== value.length) {\n          onInput(\n            value.slice(0, caretPosition) + value.slice(caretPosition + 1),\n            caretPosition,\n            false\n          )\n        }\n      } else if (e.key.length === 1) {\n        const pressedKey = e.key\n          .replace('/', OperatorKeys.Div)\n          .replace('*', OperatorKeys.Mult)\n\n        onInput(\n          value.substring(0, caretPosition) +\n            pressedKey +\n            value.substring(caretPosition),\n          caretPosition + 1,\n          true\n        )\n      } else if (e.key === 'ArrowLeft') {\n        if (caretPosition > 0) onCaretPositionChange(caretPosition - 1)\n      } else if (e.key === 'ArrowRight') {\n        if (caretPosition < value.length)\n          onCaretPositionChange(caretPosition + 1)\n      }\n    },\n    [\n      caretPosition,\n      onCaretPositionChange,\n      onEqualsKeyPressed,\n      onInput,\n      valueOneString,\n    ]\n  )\n\n  const handlePaste = useCallback(\n    (e: ClipboardEvent) => {\n      if (!e.clipboardData) return\n\n      const value = valueOneString || ''\n      const pastedValue = e.clipboardData.getData('text/plain')\n\n      onInput(\n        value.substring(0, caretPosition) +\n          pastedValue +\n          value.substring(caretPosition),\n        pastedValue.length,\n        false\n      )\n    },\n    [caretPosition, onInput, valueOneString]\n  )\n\n  useEffect(() => {\n    if (isInputFocused) {\n      document.addEventListener('keydown', handleKeyDown)\n      document.addEventListener('paste', handlePaste)\n    }\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [isInputFocused, handleKeyDown, handlePaste])\n}\n\nexport default useHardwareKeyboard\n","import { useCallback, useEffect } from 'react'\nimport { inputPadding } from '../styles'\nimport type { CaretElement, InputElement } from '../types'\n\nconst useScrollToCaret = (\n  inputElem: InputElement,\n  caretElement: CaretElement,\n  valueOneString: string | null\n): void => {\n  const scrollToCaret = useCallback(() => {\n    if (!inputElem || !caretElement) return\n\n    const visibleRange = {\n      left: inputElem.scrollLeft + inputPadding,\n      right: inputElem.scrollLeft + inputElem.clientWidth - inputPadding,\n    }\n\n    const caretLeftMargin =\n      caretElement.getBoundingClientRect().left +\n      inputPadding +\n      inputElem.scrollLeft\n\n    const isCaretVisible =\n      caretLeftMargin > visibleRange.left &&\n      caretLeftMargin < visibleRange.right\n\n    if (!isCaretVisible)\n      inputElem.scrollTo({\n        left: caretLeftMargin - inputElem.clientWidth,\n        behavior: 'smooth',\n      })\n  }, [caretElement, inputElem])\n\n  useEffect(() => {\n    scrollToCaret()\n  }, [scrollToCaret, valueOneString])\n}\n\nexport default useScrollToCaret\n","import { useCallback, useEffect, useRef } from 'react'\n\nimport useStyles from './styles'\nimport type { FC } from 'react'\nimport type {\n  InputElement,\n  CaretPositionChangeHandler,\n  InputRootElement,\n  CaretElement,\n  InputValue,\n  InputHandler,\n} from './types'\n\nimport useMouseWheelScroll from './hooks/useMouseWheelScroll'\nimport useCaretPosition from './hooks/useCaretPosition'\nimport useCaretAnimation from './hooks/useCaretAnimation'\nimport useDynamicFontSize from './hooks/useDynamicFontSize'\nimport useCaretMargin from './hooks/useCaretMargin'\nimport useHardwareKeyboard from './hooks/useHardwareKeyboard'\nimport useScrollToCaret from './hooks/useScrollToCaret'\n\ninterface Props {\n  value: InputValue\n  valueOneString: string | null\n  fontSize?: number // rem\n  minFontSize?: number // rem\n  caretPosition: number\n  onInput: InputHandler\n  onEqualsKeyPressed: () => void\n  onCaretPositionChange: CaretPositionChangeHandler\n}\n\nconst CustomInput: FC<Props> = ({\n  value,\n  valueOneString,\n  fontSize = 1.6,\n  minFontSize,\n  caretPosition,\n  onInput,\n  onEqualsKeyPressed,\n  onCaretPositionChange,\n}) => {\n  const isInputFocused = true\n\n  const rootRef = useRef<InputRootElement>(null)\n  const inputRef = useRef<InputElement>(null)\n\n  const caretRef = useRef<CaretElement>(null)\n  const inputForCalculationRef = useRef<InputElement>(null)\n\n  useHardwareKeyboard({\n    isInputFocused,\n    valueOneString,\n    caretPosition,\n    onInput,\n    onCaretPositionChange,\n    onEqualsKeyPressed,\n  })\n\n  const currentFontSize = useDynamicFontSize({\n    value,\n    inputElem: inputRef.current,\n    inputRootElem: rootRef.current,\n    fontSize,\n    minFontSize,\n  })\n\n  const classes = useStyles({ fontSize: currentFontSize })\n\n  useMouseWheelScroll(rootRef.current)\n\n  useCaretPosition({\n    caretElem: caretRef.current,\n    onCaretPositionChange,\n    inputElem: inputRef.current,\n  })\n\n  const handleBlur = useCallback(() => {\n    inputRef.current?.focus({ preventScroll: true })\n  }, [])\n\n  useEffect(() => {\n    if (isInputFocused) inputRef.current?.focus()\n  }, [isInputFocused])\n\n  useCaretAnimation({\n    caretElem: caretRef.current,\n    caretPosition,\n    valueOneString,\n    isCursorVisible: true,\n    blinkingAnimationClass: classes.blinkingAnimation,\n  })\n\n  const caretMargin = useCaretMargin(\n    inputForCalculationRef.current,\n    valueOneString,\n    caretPosition\n  )\n\n  useScrollToCaret(rootRef.current, caretRef.current, valueOneString)\n\n  return (\n    <>\n      <div className={classes.inputForCalculation} ref={inputForCalculationRef}>\n        {valueOneString}\n      </div>\n      <div className={classes.root} ref={rootRef}>\n        <div className={classes.input} ref={inputRef} onBlur={handleBlur}>\n          {value}\n          <span\n            className={classes.caret}\n            ref={caretRef}\n            style={{ right: caretMargin }}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default CustomInput\n","import { useDispatch, useSelector } from 'react-redux'\nimport type { TypedUseSelectorHook } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\nexport const useAppDispatch = (): ReturnType<typeof useDispatch> =>\n  useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    flexFlow: 'column',\n    textAlign: 'right',\n  },\n\n  preResult: {\n    height: '36px', // height if there's no value\n    fontSize: '2.5rem',\n    marginRight: '25px',\n    overflow: 'auto',\n    whiteSpace: 'nowrap',\n    color: theme.palette.text.secondary,\n  },\n}))\n\nexport default useStyles\n","import { useCallback, useMemo } from 'react'\n\nimport CustomInput from 'features/input/ExpressionInput/CustomInput'\nimport {\n  caretPositionChanged,\n  equalsKeyPressed,\n  hardwareKeyPressed,\n} from 'features/input/mainInputSlice'\nimport { useAppDispatch, useAppSelector } from 'app/hooks'\nimport useStyles from './styles'\n\nimport type { FC } from 'react'\nimport { TypesOfRenderValue } from '../mainInputSlice/utils/textTesters/runTextTesters'\nimport type { InputHandler, InputValue } from './CustomInput/types'\n\n// it's too hard to make keys for input values, so just remake them on each render\nconst makeUniqueKey = () => Date.now() + Math.random()\n\nconst ExpressionInput: FC = () => {\n  const styles = useStyles()\n\n  const { valueToRender, preResult, caretPosition } = useAppSelector(\n    (state) => state.mainInput\n  )\n\n  const dispatch = useAppDispatch()\n  const handleCaretPositionChange = useCallback(\n    (newCaretPosition: number) =>\n      dispatch(caretPositionChanged(newCaretPosition)),\n    [dispatch]\n  )\n\n  const handleInput = useCallback<InputHandler>(\n    (newValue, newCaretPosition, isTestModeStrict) =>\n      dispatch(\n        hardwareKeyPressed({ newValue, newCaretPosition, isTestModeStrict })\n      ),\n    [dispatch]\n  )\n\n  const handleEqualsKeyPress = useCallback(\n    () => dispatch(equalsKeyPressed()),\n    [dispatch]\n  )\n\n  const inputValue: InputValue = useMemo(() => {\n    if (typeof valueToRender === 'string') return valueToRender\n\n    let lengthOfPrevElements: null | number = 0\n\n    return (\n      valueToRender &&\n      valueToRender.flatMap((valueObj) => {\n        const elementValue = valueObj.value\n        lengthOfPrevElements =\n          lengthOfPrevElements !== null\n            ? lengthOfPrevElements + valueObj.value.length\n            : null\n\n        return valueObj.type === TypesOfRenderValue.value ? (\n          // make key unique on each rendering\n          <span key={makeUniqueKey()}>{elementValue}</span>\n        ) : (\n          <span\n            key={makeUniqueKey()}\n            style={{\n              color:\n                valueObj.type === TypesOfRenderValue.error ? 'red' : 'orange',\n            }}\n          >\n            {elementValue}\n          </span>\n        )\n      })\n    )\n  }, [valueToRender])\n\n  const inputValueOneString =\n    typeof valueToRender === 'string'\n      ? valueToRender\n      : valueToRender &&\n        valueToRender.reduce(\n          (prevValue, valueObj) => prevValue + valueObj.value,\n          ''\n        )\n\n  return (\n    <div className={styles.root}>\n      <CustomInput\n        value={inputValue}\n        valueOneString={inputValueOneString}\n        onInput={handleInput}\n        onEqualsKeyPressed={handleEqualsKeyPress}\n        fontSize={5.5}\n        minFontSize={3.5}\n        caretPosition={caretPosition}\n        onCaretPositionChange={handleCaretPositionChange}\n      />\n      <div className={styles.preResult}>{preResult}</div>\n    </div>\n  )\n}\n\nexport default ExpressionInput\n","import { makeStyles } from '@material-ui/core/styles'\n\n// todo: CHAR-37/add round ripple\n// const rippleSize = ' 30vw'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%',\n    background: theme.palette.background.default,\n  },\n\n  button: {\n    flex: 1,\n    fontFamily: 'Roboto',\n    fontSize: '2.5rem',\n\n    // todo: CHAR-37/add round ripple\n    // '& .MuiTouchRipple-root': {\n    //   marginLeft: `calc(50% - ${rippleSize} / 2)`,\n    //   height: rippleSize,\n    //   width: rippleSize,\n    //   borderRadius: '50%',\n    // },\n  },\n\n  rightButtons: {\n    background:\n      theme.palette.type === 'dark'\n        ? theme.palette.grey[900]\n        : theme.palette.primary.main,\n\n    color: theme.palette.text.primary,\n  },\n}))\n\nexport default useStyles\n","import { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Grid from '@material-ui/core/Grid'\nimport { ButtonBase } from '@material-ui/core'\nimport { useLongPress } from 'react-use'\nimport type { FC } from 'react'\n\nimport {\n  clearAllKeyPressed,\n  equalsKeyPressed,\n  generalOrDelKeyPressed,\n} from '../mainInputSlice'\n\nimport type { GeneralKey } from '../mainInputSlice/types'\nimport { DEL_KEY, OperatorKeys } from '../mainInputSlice/types'\n\nimport useStyles from './styles'\n\nconst Keyboard: FC = () => {\n  const styles = useStyles()\n  const dispatch = useDispatch()\n\n  const BUTTONS_LEFT: GeneralKey[][] = [\n    ['7', '8', '9'],\n    ['4', '5', '6'],\n    ['1', '2', '3'],\n    [OperatorKeys.Decimal, '0', OperatorKeys.Colon],\n  ]\n\n  const OPERATORS_RIGHT = [\n    OperatorKeys.Div,\n    OperatorKeys.Mult,\n    OperatorKeys.Minus,\n    OperatorKeys.Plus,\n  ]\n\n  const handleKeyClick = useCallback(\n    (clickedKeyValue: GeneralKey) =>\n      dispatch(generalOrDelKeyPressed(clickedKeyValue)),\n    [dispatch]\n  )\n\n  const handleEqualsClick = useCallback(\n    () => dispatch(equalsKeyPressed()),\n    [dispatch]\n  )\n\n  const handleDelClick = useCallback(\n    () => dispatch(generalOrDelKeyPressed(DEL_KEY)),\n    [dispatch]\n  )\n\n  const vibrate = useCallback(() => {\n    navigator.vibrate(5)\n  }, [])\n\n  const handleDelLongPress = useLongPress(\n    useCallback(() => {\n      vibrate()\n      dispatch(clearAllKeyPressed())\n    }, [dispatch, vibrate]),\n    { isPreventDefault: false, delay: 350 }\n  )\n\n  const CalcButton: FC<{\n    onMouseUp: () => void\n    onTouchStart?: (e: React.TouchEvent<HTMLButtonElement>) => void\n    children: string\n  }> = ({ children, onTouchStart, ...props }) => (\n    <ButtonBase\n      {...props}\n      className={styles.button}\n      onTouchStart={(e) => {\n        vibrate()\n        if (onTouchStart) onTouchStart(e)\n      }}\n    >\n      {children}\n    </ButtonBase>\n  )\n\n  return (\n    <Grid className={styles.root} container>\n      <Grid container item xs={9}>\n        {BUTTONS_LEFT.map((buttonsRow) => (\n          <Grid item container xs={12} key={buttonsRow.toString()}>\n            {buttonsRow.map((btnValue) => (\n              <CalcButton\n                key={btnValue.toString()}\n                onMouseUp={() => handleKeyClick(btnValue)}\n              >\n                {btnValue}\n              </CalcButton>\n            ))}\n          </Grid>\n        ))}\n      </Grid>\n\n      <Grid\n        className={styles.rightButtons}\n        container\n        item\n        xs={3}\n        direction=\"column\"\n      >\n        <CalcButton\n          {...handleDelLongPress}\n          onMouseUp={() => {\n            handleDelClick()\n            handleDelLongPress.onMouseUp()\n          }}\n        >\n          DEL\n        </CalcButton>\n\n        {OPERATORS_RIGHT.map((btnValue) => (\n          <CalcButton\n            key={btnValue.toString()}\n            onMouseUp={() => handleKeyClick(btnValue)}\n          >\n            {btnValue}\n          </CalcButton>\n        ))}\n\n        <CalcButton onMouseUp={handleEqualsClick}>=</CalcButton>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default Keyboard\n","import useStyles from 'app/styles'\n\nimport ExpressionInput from 'features/input/ExpressionInput'\nimport Keyboard from 'features/input/Keyboard'\n\nimport type { FC } from 'react'\n\nconst AppLayout: FC = () => {\n  const styles = useStyles()\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.expressionInput}>\n        <ExpressionInput />\n      </div>\n\n      <div className={styles.keyboard}>\n        <Keyboard />\n      </div>\n    </div>\n  )\n}\n\nexport default AppLayout\n","import { StrictMode, useEffect, useMemo, useState } from 'react'\nimport { Provider } from 'react-redux'\nimport { CssBaseline, ThemeProvider, useMediaQuery } from '@material-ui/core'\nimport { store } from 'app/store'\nimport createTheme from 'app/theme'\nimport AppLayout from 'app/AppLayout'\nimport type { FC } from 'react'\n\nconst App: FC = () => {\n  const isDarkModeEnabled = useMediaQuery('(prefers-color-scheme: dark)')\n\n  const theme = useMemo(\n    () => createTheme(isDarkModeEnabled),\n    [isDarkModeEnabled]\n  )\n\n  // the first value of isDarkModeEnabled is always true, and there is some blinking when dark mode was enabled,\n  // so render the app only when final value was set\n  const [shouldRender, setShouldRender] = useState(false)\n  useEffect(() => {\n    setTimeout(() => setShouldRender(true))\n  }, [])\n\n  return shouldRender ? (\n    <StrictMode>\n      <Provider store={store}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <AppLayout />\n        </ThemeProvider>\n      </Provider>\n    </StrictMode>\n  ) : null\n}\n\nexport default App\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import ReactDOM from 'react-dom'\n\nimport App from './App'\nimport './index.css'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorkerRegistration.register()\n"],"sourceRoot":""}